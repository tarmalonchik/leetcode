package main

func nextGreaterElement(nums1 []int, nums2 []int) []int {
	mp := make(map[int]int, len(nums2))
	st := newStack()
	out := make([]int, len(nums1))

	for i := len(nums2) - 1; i >= 0; i-- {
		mp[nums2[i]] = st.add(nums2[i])
	}

	for i := range nums1 {
		out[i] = mp[nums1[i]]
	}
	return out
}

type stack struct {
	list []int
	size int
	max  int
}

func newStack() stack {
	return stack{
		list: make([]int, 1000),
		size: 0,
		max:  0,
	}
}

func (s *stack) add(in int) int {
	if in == 0 && s.max == 0 {
		return -1
	}
	if s.max < in {
		s.max = in
		s.size = 1
		s.list[s.size-1] = in
		return -1
	}
	if in < s.list[s.size-1] {
		s.size++
		s.list[s.size-1] = in
		return s.list[s.size-2]
	}
	s.size = s.findIdx(in)
	s.size++
	s.list[s.size-1] = in
	return s.list[s.size-2]
}

func (s *stack) findIdx(in int) int {
	pos1 := 0
	pos2 := s.size - 1
	center := pos1 + (pos2-pos1)/2

	for {
		if pos2-pos1 <= 1 {
			if s.list[pos1] > in {
				return pos2
			} else {
				return pos1
			}
		}
		if s.list[center] > in {
			pos1 = center
		} else {
			pos2 = center
		}
		center = pos1 + (pos2-pos1)/2
	}
}

// 236 92 122 131 131 236 236 248 171 199 169 169 199 248 250 196 198 198 198 198 198 215 230 250 189 189 206 216 216 216 216 250 250 183 250 250 253 109 140 147 207 96 105 207 207 241 245 217 221 221 -1 221 245 212 132 144 144 175 91 175 188 170 174 174 188 102 167 188 70 143 143 153 153 160 188 188 212 146 212 245 162 163 163 245 245 245 249 192 211 211 224 180 180 224 155 224 238 158 158 165 165 166 166 166 208 125 208 11 208 210 194 106 194 210 184 184 210 113 210 210 210 223 223 223 223 238 238 244 154 154 244 244 249 249 253 164 227 253 255 157 179 179 203 203 252 127 152 252 255 185 219 219 219 234 156 234 234 255 193 220 187 220 220 220 255 255 -1 204 239 107 239 242 139 159 242 242 242 246 172 209 218 218 218 218 246 254 243 243 254 214 161 214 214 214 229 114 182 182 229 229 233 129 226 226 233 233 233 233 240 240 254 -1 251 -1 195 195 205 205 213 213 66 213 213 237 68 237 247 200 200 235 177 177 235 138 138 235 235 247 186 201 201 228 101 151 228 228 231 247 225 247 222 247 247 247 247 -1
// 236,92,122,131,131,236,236,248,171,199,169,169,199,248,250,196,198,198,198,198,198,215,230,250,189,189,206,216,216,216,216,250,250,183,250,250,253,109,140,147,207,96,105,207,207,241,245,217,221,221,35,221,245,212,132,144,144,175,91,175,188,170,174,174,188,102,167,188,70,143,143,153,153,160,188,188,212,146,212,245,162,163,163,245,245,245,249,192,211,211,224,180,180,224,155,224,238,158,158,165,165,166,166,166,208,125,208,11,208,210,194,106,194,210,184,184,210,113,210,210,210,223,223,223,223,238,238,244,154,154,244,244,249,249,253,164,227,253,255,157,179,179,203,203,252,127,152,252,255,185,219,219,219,234,156,234,234,255,193,220,187,220,220,220,255,255,-1,204,239,107,239,242,139,159,242,242,242,246,172,209,218,218,218,218,246,254,243,243,254,214,161,214,214,214,229,114,182,182,229,229,233,129,226,226,233,233,233,233,240,240,254,-1,251,-1,195,195,205,205,213,213,66,213,213,237,68,237,247,200,200,235,177,177,235,138,138,235,235,247,186,201,201,228,101,151,228,228,231,247,225,247,222,247,247,247,247,-1]
